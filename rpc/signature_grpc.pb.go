// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.6.1
// source: rpc/signature.proto

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Signature_GetPubKey_FullMethodName    = "/rpc.Signature/GetPubKey"
	Signature_GetSignature_FullMethodName = "/rpc.Signature/GetSignature"
)

// SignatureClient is the client API for Signature service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The signature service definition.
type SignatureClient interface {
	// Sends a get pubkey
	GetPubKey(ctx context.Context, in *GetPubKeyRequest, opts ...grpc.CallOption) (*GetPubKeyReply, error)
	GetSignature(ctx context.Context, in *GetSignatureRequest, opts ...grpc.CallOption) (*GetSignatureReply, error)
}

type signatureClient struct {
	cc grpc.ClientConnInterface
}

func NewSignatureClient(cc grpc.ClientConnInterface) SignatureClient {
	return &signatureClient{cc}
}

func (c *signatureClient) GetPubKey(ctx context.Context, in *GetPubKeyRequest, opts ...grpc.CallOption) (*GetPubKeyReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPubKeyReply)
	err := c.cc.Invoke(ctx, Signature_GetPubKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signatureClient) GetSignature(ctx context.Context, in *GetSignatureRequest, opts ...grpc.CallOption) (*GetSignatureReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSignatureReply)
	err := c.cc.Invoke(ctx, Signature_GetSignature_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SignatureServer is the server API for Signature service.
// All implementations must embed UnimplementedSignatureServer
// for forward compatibility.
//
// The signature service definition.
type SignatureServer interface {
	// Sends a get pubkey
	GetPubKey(context.Context, *GetPubKeyRequest) (*GetPubKeyReply, error)
	GetSignature(context.Context, *GetSignatureRequest) (*GetSignatureReply, error)
	mustEmbedUnimplementedSignatureServer()
}

// UnimplementedSignatureServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSignatureServer struct{}

func (UnimplementedSignatureServer) GetPubKey(context.Context, *GetPubKeyRequest) (*GetPubKeyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPubKey not implemented")
}
func (UnimplementedSignatureServer) GetSignature(context.Context, *GetSignatureRequest) (*GetSignatureReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSignature not implemented")
}
func (UnimplementedSignatureServer) mustEmbedUnimplementedSignatureServer() {}
func (UnimplementedSignatureServer) testEmbeddedByValue()                   {}

// UnsafeSignatureServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SignatureServer will
// result in compilation errors.
type UnsafeSignatureServer interface {
	mustEmbedUnimplementedSignatureServer()
}

func RegisterSignatureServer(s grpc.ServiceRegistrar, srv SignatureServer) {
	// If the following call pancis, it indicates UnimplementedSignatureServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Signature_ServiceDesc, srv)
}

func _Signature_GetPubKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPubKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignatureServer).GetPubKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Signature_GetPubKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignatureServer).GetPubKey(ctx, req.(*GetPubKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Signature_GetSignature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSignatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignatureServer).GetSignature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Signature_GetSignature_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignatureServer).GetSignature(ctx, req.(*GetSignatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Signature_ServiceDesc is the grpc.ServiceDesc for Signature service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Signature_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.Signature",
	HandlerType: (*SignatureServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPubKey",
			Handler:    _Signature_GetPubKey_Handler,
		},
		{
			MethodName: "GetSignature",
			Handler:    _Signature_GetSignature_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/signature.proto",
}
